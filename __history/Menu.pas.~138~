unit Menu;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.Menus, Vcl.StdCtrls, Vcl.ExtCtrls,
  Vcl.ComCtrls, System.DateUtils;

type
  TfrmMenu = class(TForm)
    MainMenu1: TMainMenu;
    Cadastros1: TMenuItem;
    Agendamento1: TMenuItem;
    Relatorios1: TMenuItem;
    Sair1: TMenuItem;
    Produtos1: TMenuItem;
    Usuarios1: TMenuItem;
    Funcionarios1: TMenuItem;
    Funcionarios2: TMenuItem;
    Sair2: TMenuItem;
    Cliente2: TMenuItem;
    Agendamento2: TMenuItem;
    Formadepagamento1: TMenuItem;
    RelatoriosOperacionais1: TMenuItem;
    RelatriosFinanceiros1: TMenuItem;
    BtnEnviarWhatsappAgendamento: TButton;
    Label1: TLabel;
    Label2: TLabel;
    btnEnviarFuncionarios: TButton;
    Panel1: TPanel;
    Con1: TMenuItem;
    Parametro1: TMenuItem;
    TimerLembretes: TTimer;
    btnTestarLembretes: TButton;
    procedure Usuarios1Click(Sender: TObject);
    procedure Funcionarios1Click(Sender: TObject);
    procedure Funcionarios2Click(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure fornecedores1Click(Sender: TObject);
    procedure Sair2Click(Sender: TObject);
    procedure Agendamento2Click(Sender: TObject);
    procedure Cliente2Click(Sender: TObject);
    procedure Produtos1Click(Sender: TObject);
    procedure teste1Click(Sender: TObject);
    procedure Formadepagamento1Click(Sender: TObject);
    procedure RelatoriosOperacionais1Click(Sender: TObject);
    procedure RelatriosFinanceiros1Click(Sender: TObject);
    procedure BtnEnviarWhatsappAgendamentoClick(Sender: TObject);
    procedure btnEnviarFuncionariosClick(Sender: TObject);
    procedure Parametro1Click(Sender: TObject);
    procedure TimerLembretesTimer(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure btnTestarLembretesClick(Sender: TObject);

  private
  FUltimoEnvioLembretes: TDateTime;
  const HORA_ENVIO_LEMBRETES = '16:57:00';
  procedure EnviarLembretesAgendamentos(DataAgendamento: TDate);


  public
    { Public declarations }
  end;

var
  frmMenu: TfrmMenu;

implementation

{$R *.dfm}

uses Usuarios, Funcionario, Cargos, Modulo, Fornecedores, login, Agendamento,
  Cliente, Servicos, Vincular_Servicos, forma_pagamento,
  Relatorios_Operacionais, Relatorios_Financeiros, parametro;

procedure TfrmMenu.Agendamento2Click(Sender: TObject);
begin
    frmAgendamento :=TfrmAgendamento.Create(self);
    frmAgendamento.ShowModal;
end;

procedure TfrmMenu.BtnEnviarWhatsappAgendamentoClick(Sender: TObject);
var
  nomeCliente, telefoneCliente, nomeFuncionario, Mensagem: string;
begin
  try
    dm.query_agendamentos.Close;
    dm.query_agendamentos.SQL.Text :=
      'SELECT * FROM agendamentos WHERE data = :data';
    dm.query_agendamentos.ParamByName('data').AsDate := now;
    dm.query_agendamentos.Open;

    while not dm.query_agendamentos.Eof do
    begin
      nomeCliente := dm.query_agendamentos.FieldByName('Cliente').AsString;
      nomeFuncionario := dm.query_agendamentos.FieldByName('Funcionario').AsString;

      // Busca o telefone do cliente
      dm.query_cliente.Close;
      dm.query_cliente.SQL.Text :=
        'SELECT telefone FROM cliente WHERE nome = :nome';
      dm.query_cliente.ParamByName('nome').AsString := nomeCliente;
      dm.query_cliente.Open;

      telefoneCliente := dm.query_cliente.FieldByName('telefone').AsString;

      if (telefoneCliente <> '') and (nomeCliente <> '') and (nomeFuncionario <> '') then
      begin
        Mensagem := Format('Olá %s! Seu agendamento está confirmado para %s às %s com %s.',
          [nomeCliente,
           FormatDateTime('dd/mm/yyyy', dm.query_agendamentos.FieldByName('data').AsDateTime),
           FormatDateTime('hh:nn', dm.query_agendamentos.FieldByName('hora').AsDateTime),
           nomeFuncionario]);

        frmAgendamento.EnviarMensagemWhatsApp(telefoneCliente, Mensagem);

      end;

      dm.query_agendamentos.Next;
    end;

    MessageDlg('Mensagens enviadas para os clientes.', mtInformation, [mbOK], 0);
  except
    on E: Exception do
      MessageDlg('Erro: ' + E.Message, mtError, [mbOK], 0);
  end;
end;


procedure TfrmMenu.btnTestarLembretesClick(Sender: TObject);
begin
  EnviarLembretesAgendamentos(Date); // Força o envio para agendamentos de AMANHÃ
end;

procedure TfrmMenu.btnEnviarFuncionariosClick(Sender: TObject);
var
  nomeFuncionario, telefoneFuncionario, nomeCliente, horaStr: string;
  enderecoCliente, cepCliente, listaServicosAgendamento: string; // Adicionado listaServicosAgendamento
  funcionarioAnterior, listaClientes, Mensagem: string;
  PrimeiraIteracao: Boolean;
begin
  try
    ShowMessage('Iniciando envio de mensagens para funcionários.');

    dm.query_enviarfuc.Close;
    dm.query_enviarfuc.SQL.Text :=
      'SELECT ' +
      '  a.id, ' +
      '  a.data, ' +
      '  a.hora, ' +
      '  a.descricao, ' +
      '  a.ConfirmacaoCliente, ' +
      '  a.horas_trabalhadas, ' +
      '  a.Realizado, ' +
      '  a.Funcionario, ' +
      '  a.Cliente, ' +
      '  c.endereco, ' +
      '  c.cep, ' +
      '  GROUP_CONCAT(ags.nomeServico SEPARATOR ''; '') AS ServicosDoAgendamento ' + // Junta os serviços
      'FROM ' +
      '  agendamentos AS a ' +
      'JOIN ' +
      '  cliente AS c ON a.cliente_id = c.id ' + // Use cliente_id se você fez a alteração no banco
      'LEFT JOIN ' + // Usar LEFT JOIN para garantir que agendamentos sem serviço também apareçam
      '  agendamento_servicos AS ags ON a.id = ags.idAgendamento ' +
      'WHERE ' +
      '  a.data = :data ' +
      'GROUP BY ' + // Agrupar para que GROUP_CONCAT funcione corretamente
      '  a.id, ' +
      '  a.data, ' +
      '  a.hora, ' +
      '  a.descricao, ' +
      '  a.ConfirmacaoCliente, ' +
      '  a.horas_trabalhadas, ' +
      '  a.Realizado, ' +
      '  a.Funcionario, ' +
      '  a.Cliente, ' +
      '  c.endereco, ' +
      '  c.cep ' +
      'ORDER BY ' +
      '  a.Funcionario, a.hora';

    dm.query_enviarfuc.ParamByName('data').AsDate := Date;
    dm.query_enviarfuc.Open;

    ShowMessage('Query principal aberta. Total de registros: ' + IntToStr(dm.query_enviarfuc.RecordCount));

    funcionarioAnterior := '';
    listaClientes := '';
    PrimeiraIteracao := True;

    while not dm.query_enviarfuc.Eof do
    begin
      nomeFuncionario := dm.query_enviarfuc.FieldByName('Funcionario').AsString;
      nomeCliente := dm.query_enviarfuc.FieldByName('Cliente').AsString;
      horaStr := FormatDateTime('hh:nn', dm.query_enviarfuc.FieldByName('hora').AsDateTime);

      ShowMessage('Iteração: ' + IntToStr(dm.query_enviarfuc.RecNo) +
                  ' | nomeFuncionario: ' + QuotedStr(nomeFuncionario) +
                  ' | funcionarioAnterior: ' + QuotedStr(funcionarioAnterior));

      enderecoCliente := '';
      cepCliente := '';
      if not dm.query_enviarfuc.FieldByName('endereco').IsNull then
        enderecoCliente := dm.query_enviarfuc.FieldByName('endereco').AsString
      else
        ShowMessage('AVISO: Endereço do cliente ' + nomeCliente + ' está NULO ou não encontrado no JOIN.');

      if not dm.query_enviarfuc.FieldByName('cep').IsNull then
        cepCliente := dm.query_enviarfuc.FieldByName('cep').AsString
      else
        ShowMessage('AVISO: CEP do cliente ' + nomeCliente + ' está NULO ou não encontrado no JOIN.');

      // Pega a lista de serviços para o agendamento atual
      listaServicosAgendamento := ''; // Reinicia para cada agendamento
      if not dm.query_enviarfuc.FieldByName('ServicosDoAgendamento').IsNull then
        listaServicosAgendamento := dm.query_enviarfuc.FieldByName('ServicosDoAgendamento').AsString;

      // Se não há serviços vinculados, ou se a string de serviços está vazia, use uma mensagem padrão
      if Trim(listaServicosAgendamento) = '' then
        listaServicosAgendamento := 'Nenhum serviço especificado';

      ShowMessage('Serviços para este agendamento (' + nomeCliente + '): ' + listaServicosAgendamento);


      if (not PrimeiraIteracao) and (nomeFuncionario <> funcionarioAnterior) then
      begin
        ShowMessage('!!! Entrou no IF de mudança de funcionário (NÃO é a primeira e funcionário mudou) !!!');
        if (listaClientes <> '') then
        begin
          ShowMessage('Preparando para enviar para o FUNCIONARIO ANTERIOR: ' + QuotedStr(funcionarioAnterior));
          dm.query_func.Close;
          dm.query_func.SQL.Text :=
            'SELECT telefone FROM funcionarios WHERE nome = :nome';
          dm.query_func.ParamByName('nome').AsString := funcionarioAnterior;
          dm.query_func.Open;

          if not dm.query_func.IsEmpty then
          begin
            telefoneFuncionario := dm.query_func.FieldByName('telefone').AsString;
            ShowMessage('Telefone do funcionario Anterior (' + funcionarioAnterior + '): ' + QuotedStr(telefoneFuncionario));

            if telefoneFuncionario <> '' then
            begin
              Mensagem := Format('Olá %s! Seus agendamentos para hoje são:%s',
                [funcionarioAnterior, listaClientes]);
              ShowMessage('Mensagem para ' + funcionarioAnterior + ': ' + Mensagem);
              frmAgendamento.EnviarMensagemWhatsApp(telefoneFuncionario, Mensagem);
              ShowMessage('Mensagem ENVIADA (via WhatsApp) para ' + funcionarioAnterior + ' com a lista de clientes.');
            end else begin
              ShowMessage('AVISO: Telefone do funcionario Anterior (' + funcionarioAnterior + ') está vazio. Mensagem NÃO enviada.');
            end;
          end else begin
            ShowMessage('AVISO: Funcionário Anterior (' + funcionarioAnterior + ') NÃO encontrado na tabela de funcionários. Mensagem NÃO enviada.');
          end;
          dm.query_func.Close;
        end else begin
            ShowMessage('AVISO: listaClientes está vazia para o funcionário Anterior (' + funcionarioAnterior + '). Nenhuma mensagem acumulada para enviar.');
        end;

        listaClientes := '';
      end;

      funcionarioAnterior := nomeFuncionario;

      // Adiciona cliente com endereço, CEP E SERVIÇOS na lista
      listaClientes := listaClientes + sLineBreak +
        '- ' + horaStr + ' com ' + nomeCliente + sLineBreak +
        ' | Serviços: ' + listaServicosAgendamento + sLineBreak +// Adicionado os serviços aqui
        ' | Endereço: ' + enderecoCliente +  sLineBreak +
        ' | CEP: ' + cepCliente +  sLineBreak +
        '--------------------------------------------------------';

      ShowMessage('Conteúdo de listaClientes após acumular: ' + QuotedStr(listaClientes));

      PrimeiraIteracao := False;
      dm.query_enviarfuc.Next;
    end; // Fim do loop while

    ShowMessage('Fim do loop principal. Verificando se há mensagens pendentes para o ÚLTIMO funcionário.');
    ShowMessage('Valores antes do IF final: funcionarioAnterior=' + QuotedStr(funcionarioAnterior) + ' | listaClientes=' + QuotedStr(listaClientes));

    if (funcionarioAnterior <> '') and (listaClientes <> '') then
    begin
      ShowMessage('!!! Enviando para o ÚLTIMO funcionário: ' + QuotedStr(funcionarioAnterior) + ' !!!');
      dm.query_func.Close;
      dm.query_func.SQL.Text :=
        'SELECT telefone FROM funcionarios WHERE nome = :nome';
      dm.query_func.ParamByName('nome').AsString := funcionarioAnterior;
      dm.query_func.Open;

      if not dm.query_func.IsEmpty then
      begin
        telefoneFuncionario := dm.query_func.FieldByName('telefone').AsString;
        ShowMessage('Telefone do ÚLTIMO funcionario (' + funcionarioAnterior + '): ' + QuotedStr(telefoneFuncionario));

        if telefoneFuncionario <> '' then
        begin
          Mensagem := Format('Olá %s! Seus agendamentos para hoje são:%s',
            [funcionarioAnterior, listaClientes]);
          ShowMessage('Mensagem para o ÚLTIMO funcionário: ' + Mensagem);
          frmAgendamento.EnviarMensagemWhatsApp(telefoneFuncionario, Mensagem);
          ShowMessage('Mensagem ENVIADA (via WhatsApp) para o ÚLTIMO funcionário ' + funcionarioAnterior + '.');
        end else begin
          ShowMessage('AVISO: Telefone do ÚLTIMO funcionário (' + funcionarioAnterior + ') está vazio. Mensagem NÃO enviada.');
        end;
      end else begin
        ShowMessage('AVISO: Último funcionário (' + funcionarioAnterior + ') NÃO encontrado na tabela de funcionários. Mensagem NÃO enviada.');
      end;
      dm.query_func.Close;
    end else begin
      ShowMessage('AVISO: Não há agendamentos válidos para o ÚLTIMO funcionário ou lista de clientes vazia. Nenhuma mensagem final enviada.');
    end;

    MessageDlg('Processo de envio de mensagens concluído.', mtInformation, [mbOK], 0);


  finally
    if dm.query_enviarfuc.Active then
      dm.query_enviarfuc.Close;
    ShowMessage('Query dm.query_enviarfuc fechada no finally.');
  end;
end;

procedure TfrmMenu.Cliente2Click(Sender: TObject);
begin
      FrmCliente := TFrmCliente.Create(self);
      FrmCliente.ShowModal;
end;

procedure TfrmMenu.EnviarLembretesAgendamentos(DataAgendamento: TDate);
var
  nomeFuncionario, telefoneFuncionario, nomeCliente, horaStr: string;
  enderecoCliente, cepCliente, listaServicosAgendamento: string;
  funcionarioAnterior, listaClientes, Mensagem: string;
begin
  ShowMessage('Iniciando envio de Lembretes Automáticos para agendamentos de: ' + FormatDateTime('dd/mm/yyyy', DataAgendamento));
  try
    dm.query_enviarfuc.Close;
    dm.query_enviarfuc.SQL.Text :=
      'SELECT ' +
      '  a.id, ' +
      '  a.data, ' +
      '  a.hora, ' +
      '  a.descricao, ' +
      '  a.ConfirmacaoCliente, ' +
      '  a.horas_trabalhadas, ' +
      '  a.Realizado, ' +
      '  a.Funcionario, ' +
      '  c.nome AS NomeClienteDoAgendamento, ' +
      '  c.endereco, ' +
      '  c.cep, ' +
      '  GROUP_CONCAT(ags.nomeServico SEPARATOR '', '') AS ServicosDoAgendamento ' +
      'FROM ' +
      '  agendamentos AS a ' +
      'JOIN ' +
      '  cliente AS c ON a.cliente_id = c.id ' +
      'LEFT JOIN ' +
      '  agendamento_servicos AS ags ON a.id = ags.idAgendamento ' +
      'WHERE ' +
      '  a.data = :data ' + // Filtra pela data passada como parâmetro
      'GROUP BY ' +
      '  a.id, ' +
      '  a.data, ' +
      '  a.hora, ' +
      '  a.descricao, ' +
      '  a.ConfirmacaoCliente, ' +
      '  a.horas_trabalhadas, ' +
      '  a.Realizado, ' +
      '  a.Funcionario, ' +
      '  NomeClienteDoAgendamento, ' +
      '  c.endereco, ' +
      '  c.cep ' +
      'ORDER BY ' +
      '  a.Funcionario, a.hora';

    dm.query_enviarfuc.ParamByName('data').AsDate := DataAgendamento; // Usa a data do parâmetro
    dm.query_enviarfuc.Open;

    ShowMessage('Query de lembretes aberta. Total de agendamentos para ' + FormatDateTime('dd/mm/yyyy', DataAgendamento) + ': ' + IntToStr(dm.query_enviarfuc.RecordCount));

    funcionarioAnterior := '';
    listaClientes := '';
    var PrimeiraIteracao: Boolean := True; // Inicializa dentro da procedure

    while not dm.query_enviarfuc.Eof do
    begin
      nomeFuncionario := dm.query_enviarfuc.FieldByName('Funcionario').AsString;
      nomeCliente := dm.query_enviarfuc.FieldByName('NomeClienteDoAgendamento').AsString;
      horaStr := FormatDateTime('hh:nn', dm.query_enviarfuc.FieldByName('hora').AsDateTime);

      enderecoCliente := '';
      cepCliente := '';
      if not dm.query_enviarfuc.FieldByName('endereco').IsNull then
        enderecoCliente := dm.query_enviarfuc.FieldByName('endereco').AsString;
      if not dm.query_enviarfuc.FieldByName('cep').IsNull then
        cepCliente := dm.query_enviarfuc.FieldByName('cep').AsString;

      listaServicosAgendamento := '';
      if not dm.query_enviarfuc.FieldByName('ServicosDoAgendamento').IsNull then
        listaServicosAgendamento := dm.query_enviarfuc.FieldByName('ServicosDoAgendamento').AsString;

      if Trim(listaServicosAgendamento) = '' then
        listaServicosAgendamento := 'Nenhum serviço especificado';


      // Lógica de mudança de funcionário para enviar mensagem
      if (not PrimeiraIteracao) and (nomeFuncionario <> funcionarioAnterior) then
      begin
        if (listaClientes <> '') then
        begin
          dm.query_func.Close;
          dm.query_func.SQL.Text := 'SELECT telefone FROM funcionarios WHERE nome = :nome';
          dm.query_func.ParamByName('nome').AsString := funcionarioAnterior;
          dm.query_func.Open;

          if not dm.query_func.IsEmpty then
          begin
            telefoneFuncionario := dm.query_func.FieldByName('telefone').AsString;
            if telefoneFuncionario <> '' then
            begin
              Mensagem := Format('Olá %s! Lembrete: Você tem agendamentos para %s:%s',
                [funcionarioAnterior, FormatDateTime('dd/mm/yyyy', DataAgendamento), listaClientes]);
              frmAgendamento.EnviarMensagemWhatsApp(telefoneFuncionario, Mensagem);
              ShowMessage('Lembrete enviado para FUNCIONARIO: ' + funcionarioAnterior + ' para ' + FormatDateTime('dd/mm/yyyy', DataAgendamento));
            end;
          end;
          dm.query_func.Close;
        end;
        listaClientes := '';
      end;

      funcionarioAnterior := nomeFuncionario; // Atualiza para o funcionário atual

      // Acumula a lista de clientes para o funcionário atual
      listaClientes := listaClientes + sLineBreak +
        '- Hora: ' + horaStr + sLineBreak +
        '  Cliente: ' + nomeCliente + sLineBreak +
        '  Serviços: ' + listaServicosAgendamento + sLineBreak +
        '  Endereço: ' + enderecoCliente + sLineBreak +
        '  CEP: ' + cepCliente + sLineBreak;

      PrimeiraIteracao := False;
      dm.query_enviarfuc.Next;
    end; // Fim do loop while

    // Envia a mensagem para o ÚLTIMO funcionário (se houver agendamentos acumulados)
    if (funcionarioAnterior <> '') and (listaClientes <> '') then
    begin
      dm.query_func.Close;
      dm.query_func.SQL.Text := 'SELECT telefone FROM funcionarios WHERE nome = :nome';
      dm.query_func.ParamByName('nome').AsString := funcionarioAnterior;
      dm.query_func.Open;

      if not dm.query_func.IsEmpty then
      begin
        telefoneFuncionario := dm.query_func.FieldByName('telefone').AsString;
        if telefoneFuncionario <> '' then
        begin
          Mensagem := Format('Olá %s! Lembrete: Você tem agendamentos para %s:%s',
            [funcionarioAnterior, FormatDateTime('dd/mm/yyyy', DataAgendamento), listaClientes]);
          frmAgendamento.EnviarMensagemWhatsApp(telefoneFuncionario, Mensagem);
          ShowMessage('Lembrete enviado para o ÚLTIMO FUNCIONARIO: ' + funcionarioAnterior + ' para ' + FormatDateTime('dd/mm/yyyy', DataAgendamento));
        end;
      end;
      dm.query_func.Close;
    end;

    // --- Envio de Lembretes para Clientes (ADICIONAL) ---
    // Você pode adaptar a lógica acima para enviar um lembrete por cliente
    // A diferença seria agrupar por cliente, e não por funcionário
    // Exemplo:
    dm.query_enviarfuc.Close; // Reutilize a query para nova consulta
    dm.query_enviarfuc.SQL.Text :=
      'SELECT a.id, a.data, a.hora, c.nome AS NomeClienteDoAgendamento, c.telefone AS TelefoneCliente, ' +
      'a.Funcionario, GROUP_CONCAT(ags.nomeServico SEPARATOR '', '') AS ServicosDoAgendamento ' +
      'FROM agendamentos AS a ' +
      'JOIN cliente AS c ON a.cliente_id = c.id ' +
      'LEFT JOIN agendamento_servicos AS ags ON a.id = ags.idAgendamento ' +
      'WHERE a.data = :data ' +
      'GROUP BY a.id, a.data, a.hora, NomeClienteDoAgendamento, TelefoneCliente, a.Funcionario ' +
      'ORDER BY NomeClienteDoAgendamento, a.hora';

    dm.query_enviarfuc.ParamByName('data').AsDate := DataAgendamento;
    dm.query_enviarfuc.Open;

    ShowMessage('Iniciando envio de Lembretes Automáticos para CLIENTES para: ' + FormatDateTime('dd/mm/yyyy', DataAgendamento) + '. Total: ' + IntToStr(dm.query_enviarfuc.RecordCount));

    while not dm.query_enviarfuc.Eof do
    begin
      nomeCliente := dm.query_enviarfuc.FieldByName('NomeClienteDoAgendamento').AsString;
      telefoneCliente := dm.query_enviarfuc.FieldByName('TelefoneCliente').AsString;
      horaStr := FormatDateTime('hh:nn', dm.query_enviarfuc.FieldByName('hora').AsDateTime);
      nomeFuncionario := dm.query_enviarfuc.FieldByName('Funcionario').AsString;
      listaServicosAgendamento := '';
      if not dm.query_enviarfuc.FieldByName('ServicosDoAgendamento').IsNull then
        listaServicosAgendamento := dm.query_enviarfuc.FieldByName('ServicosDoAgendamento').AsString;

      if Trim(listaServicosAgendamento) = '' then
        listaServicosAgendamento := 'serviços agendados'; // Mensagem mais amigável para cliente

            // --- Debug dos valores do CLIENTE ---
    ShowMessage('Processando CLIENTE: ' + QuotedStr(nomeCliente) +
                ' | Telefone: ' + QuotedStr(telefoneCliente) +
                ' | Agendamento: ' + horaStr + ' com ' + nomeFuncionario +
                ' | Servicos: ' + listaServicosAgendamento);
    // --- Fim Debug ---

      if (telefoneCliente <> '') and (nomeCliente <> '') then
      begin
        Mensagem := Format('Olá %s! Seu agendamento para %s às %s com %s (%s) está chegando! Te aguardamos.',
          [nomeCliente,
           FormatDateTime('dd/mm/yyyy', DataAgendamento),
           horaStr,
           nomeFuncionario,
           listaServicosAgendamento]);

        frmAgendamento.EnviarMensagemWhatsApp(telefoneCliente, Mensagem);
        ShowMessage('Lembrete enviado para CLIENTE: ' + nomeCliente + ' para ' + FormatDateTime('dd/mm/yyyy', DataAgendamento));
      end else begin
        ShowMessage('AVISO: Cliente ' + nomeCliente + ' sem telefone ou nome. Lembrete NÃO enviado.');
      end;

      dm.query_enviarfuc.Next;
    end;
    // Fim do envio de lembretes para clientes

    ShowMessage('Envio de lembretes automáticos concluído para agendamentos de: ' + FormatDateTime('dd/mm/yyyy', DataAgendamento));



  finally
    if dm.query_enviarfuc.Active then
      dm.query_enviarfuc.Close;
  end;
end;

// --- Evento OnTimer do TTimer ---
procedure TfrmMenu.TimerLembretesTimer(Sender: TObject);
var
  HoraAtual: TTime;
  HoraDesejada: TTime;
begin
  HoraAtual := Time;
  HoraDesejada := StrToTime(HORA_ENVIO_LEMBRETES);

  // Verifica se a hora atual é igual ou passou da hora desejada de envio
  // E se ainda não enviou hoje (para não enviar múltiplas vezes no mesmo dia)
  if (HoraAtual >= HoraDesejada) and (StartOfTheDay(Now) > StartOfTheDay(FUltimoEnvioLembretes)) then
  begin
    // Desabilita o timer para não disparar novamente enquanto o envio ocorre
    TimerLembretes.Enabled := False;

    // Chama a função de envio para o dia seguinte (Date + 1)
    EnviarLembretesAgendamentos(Date + 1); // Envia para AGENDAMENTOS DE AMANHÃ!

    // Registra a data/hora do último envio
    FUltimoEnvioLembretes := Now;

    // Habilita o timer novamente
    TimerLembretes.Enabled := True;
  end;
end;

// --- Evento OnCreate do Formulário ---


procedure TfrmMenu.Formadepagamento1Click(Sender: TObject);
begin
 FrmFormaPgto := TFrmFormaPgto.Create(self);
 FrmFormaPgto.showModal;
end;

procedure TfrmMenu.FormCreate(Sender: TObject);
begin
  // Inicializa FUltimoEnvioLembretes com uma data muito antiga para garantir que o primeiro envio ocorra
  FUltimoEnvioLembretes := EncodeDate(1900, 1, 1);
  TimerLembretes.Enabled := True; // Habilita o timer quando o formulário é criado
  TimerLembretes.Interval := 60000; // Define o intervalo para 1 minuto (60 segundos)
end;

procedure TfrmMenu.FormShow(Sender: TObject);
begin
     if (cargoUsuario = 'admin')  or (cargoUsuario = 'Gerente') then
     Begin
       Usuarios1.Enabled := true;
     End;

end;

procedure TfrmMenu.Funcionarios1Click(Sender: TObject);
begin
  FrmFuncionarios := TFrmFuncionarios.Create(self);
  FrmFuncionarios.ShowModal;
end;

procedure TfrmMenu.Funcionarios2Click(Sender: TObject);
begin
  FrmCargos := TFrmCargos.Create(self);
  FrmCargos.ShowModal;
end;

procedure TfrmMenu.Parametro1Click(Sender: TObject);
begin
  FrmParametro := TFrmParametro.create(self);
  FrmParametro.showModal;
end;

procedure TfrmMenu.Produtos1Click(Sender: TObject);
begin
  FrmServico := TFrmServico.Create(self);
  FrmServico.ShowModal;
end;

procedure TfrmMenu.RelatoriosOperacionais1Click(Sender: TObject);
begin
 frmRelatoriosOperacionais := TfrmRelatoriosOperacionais.Create(self);
 frmRelatoriosOperacionais.ShowModal;
end;

procedure TfrmMenu.RelatriosFinanceiros1Click(Sender: TObject);
begin
     FrmRelatorios_Financeiros := TFrmRelatorios_Financeiros.create(self);
     FrmRelatorios_Financeiros.ShowModal;
end;

procedure TfrmMenu.Sair2Click(Sender: TObject);
begin
close;
end;

procedure TfrmMenu.teste1Click(Sender: TObject);
begin
frmAgendamentoServ :=TfrmAgendamentoServ.create(self);
frmAgendamentoServ.ShowModal;
end;


procedure TfrmMenu.fornecedores1Click(Sender: TObject);
begin
  frmFornecedores := TfrmFornecedores.Create(self);
  frmFornecedores.ShowModal;
end;

procedure TfrmMenu.Usuarios1Click(Sender: TObject);
begin
  FrmUsuario := TFrmUsuario.Create(self);
  FrmUsuario.ShowModal;
end;

end.
