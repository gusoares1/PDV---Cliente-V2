unit Relatorios_Financeiros;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Data.DB, Vcl.StdCtrls, Vcl.Grids,
  Vcl.DBGrids, Vcl.ComCtrls, Vcl.ExtCtrls, ComObj,FireDAC.Comp.Client,System.Math;

type
  TFrmRelatorios_Financeiros = class(TForm)
    pcRelatorios: TPageControl;
    tsFaturaServico: TTabSheet;
    Panel1: TPanel;
    Label1: TLabel;
    Label2: TLabel;
    dtpDataInicio: TDateTimePicker;
    btnFiltrarFaturamento: TButton;
    btnImprimir: TButton;
    dtpDataFim: TDateTimePicker;
    grdFaturamentoServico: TDBGrid;
    tsPagamentosPendentes: TTabSheet;
    pnlfiltrosSerivos: TPanel;
    grdServicosRealizados: TDBGrid;
    tsMetodosPagamento: TTabSheet;
    Panel2: TPanel;
    grdMetodosPagamento: TDBGrid;
    SaveDialog1: TSaveDialog;
    Label3: TLabel;
    dtpInicial: TDateTimePicker;
    Label5: TLabel;
    dtpFim: TDateTimePicker;
    btnFiltrarPendente: TButton;
    btnEnviarLembrete: TButton;
    Label4: TLabel;
    dtpInicioMetodo: TDateTimePicker;
    Label6: TLabel;
    dtpFimMetodo: TDateTimePicker;
    BtnFiltrarMetodo: TButton;
    BtnExportarMetodo: TButton;
    procedure btnFiltrarFaturamentoClick(Sender: TObject);
    procedure btnImprimirClick(Sender: TObject);
    procedure btnFiltrarPendenteClick(Sender: TObject);
    procedure btnEnviarLembreteClick(Sender: TObject);
    procedure BtnFiltrarMetodoClick(Sender: TObject);
    procedure BtnExportarMetodoClick(Sender: TObject);
  private
      procedure ExportarParaCSV(const FileName: string);
      procedure carregarCombobox(
          Combo: TComboBox;          // Combobox que será preenchido
          Query: TFDQuery;           // Query com os dados
          NomeColuna: string;        // Nome da coluna a ser carregada
          AdicionarItemVazio: Boolean = True // Opcional: adiciona item em branco no início
        );
  public
    { Public declarations }
  end;

var
  FrmRelatorios_Financeiros: TFrmRelatorios_Financeiros;

implementation

{$R *.dfm}

uses Modulo, Agendamento;

procedure TFrmRelatorios_Financeiros.btnEnviarLembreteClick(Sender: TObject);
var
  Telefone, Mensagem: string;
begin
  if not dm.query_Pagamentos_Pendentes.IsEmpty then
  begin
    Telefone := dm.query_Pagamentos_Pendentes.FieldByName('Telefone').AsString;
    Mensagem := 'Olá ' + dm.query_Pagamentos_Pendentes.FieldByName('Cliente').AsString +
      '! Você possui um pagamento pendente de R$ ' +
      FormatFloat('0.00', dm.query_Pagamentos_Pendentes.FieldByName('Valor_Pendente').AsFloat) +
      '. Por favor, regularize.';

    frmAgendamento.EnviarMensagemWhatsApp(Telefone, Mensagem); // Use sua função existente
  end;
end;

procedure TFrmRelatorios_Financeiros.BtnExportarMetodoClick(Sender: TObject);
begin
  SaveDialog1.Filter := 'Arquivos CSV|*.csv';
  if SaveDialog1.Execute then
    ExportarParaCSV(SaveDialog1.FileName);
end;

procedure TFrmRelatorios_Financeiros.btnFiltrarFaturamentoClick(
  Sender: TObject);
begin
  dm.query_Faturamento_Servico.Close;
  dm.query_Faturamento_Servico.SQL.Clear;
  dm.query_Faturamento_Servico.SQL.Text :=
       ' SELECT' +
       ' s.nomeServico AS Servico, ' +
       ' COUNT(DISTINCT s.idAgendamento) AS TotalAgendamentos, ' +
       ' SUM(s.preco - s.desconto) AS TotalLiquido,' +
       '  COALESCE(SUM(p.valor_pago), 0) AS TotalRecebido,'+
       '   (SUM(s.preco - s.desconto) - COALESCE(SUM(p.valor_pago), 0)) AS Pendente '+
        'FROM agendamento_servicos s ' +
        'JOIN agendamentos a ON s.idAgendamento = a.id ' + // Aqui está o JOIN necessário
        'LEFT JOIN agendamento_pagamento p ON s.idAgendamento = p.idAgendamento ' +
        'WHERE a.data BETWEEN :DataInicio AND :DataFim ' +
        'GROUP BY s.nomeServico';

  dm.query_Faturamento_Servico.ParamByName('DataInicio').AsDate := dtpDataInicio.Date;
  dm.query_Faturamento_Servico.ParamByName('DataFim').AsDate := dtpDataFim.Date;
  dm.query_Faturamento_Servico.Open;
end;

procedure TFrmRelatorios_Financeiros.BtnFiltrarMetodoClick(Sender: TObject);
begin
  dm.query_Metodos_Pagamento.Close;
  dm.query_Metodos_Pagamento.SQL.Text :=
    'SELECT tipo_pagamento AS Metodo, COUNT(*) As TotalTransacoes, SUM(valor_pago) as TotalRecebido, AVG(parcemento) ' +
    'FROM agendamento_pagamento ' +
    'WHERE data_pagamento BETWEEN :DataInicio AND :DataFim ' +
    'GROUP BY tipo_pagamento';

  dm.query_Metodos_Pagamento.ParamByName('DataInicio').AsDate := dtpInicioMetodo.Date;
  dm.query_Metodos_Pagamento.ParamByName('DataFim').AsDate := dtpFimMetodo.Date;
  dm.query_Metodos_Pagamento.Open;
end;

procedure TFrmRelatorios_Financeiros.btnFiltrarPendenteClick(Sender: TObject);
begin
  dm.query_Pagamentos_Pendentes.Close;
  dm.query_Pagamentos_Pendentes.SQL.Text :=

  'SELECT ' +
  '  s.idAgendamento, ' +
  '  SUM(s.preco - s.desconto) AS Total_Devido, ' +
  '  COALESCE(SUM(DISTINCT p.valor_pago), 0) AS Total_Pago, ' +
  '  (SUM(s.preco - s.desconto) - COALESCE(SUM(DISTINCT p.valor_pago), 0)) AS Valor_Pendente ' +
  'FROM agendamento_servicos s ' +
  'JOIN agendamentos a ON s.idAgendamento = a.id ' +
  'LEFT JOIN agendamento_pagamento p ON s.idAgendamento = p.idAgendamento ' +
  'WHERE a.data BETWEEN :DataInicio AND :DataFim ' +
  'GROUP BY s.idAgendamento ' +
  'HAVING (SUM(s.preco - s.desconto) - COALESCE(SUM(DISTINCT p.valor_pago), 0)) > 0';


  dm.query_Pagamentos_Pendentes.ParamByName('DataInicio').AsDate := dtpInicial.Date;
  dm.query_Pagamentos_Pendentes.ParamByName('DataFim').AsDate := dtpFim.Date;
  dm.query_Pagamentos_Pendentes.Open;
end;

procedure TFrmRelatorios_Financeiros.btnImprimirClick(Sender: TObject);
begin
  SaveDialog1.Filter := 'Arquivos CSV|*.csv';
  if SaveDialog1.Execute then
    ExportarParaCSV(SaveDialog1.FileName);
end;

procedure TFrmRelatorios_Financeiros.carregarCombobox(Combo: TComboBox;
  Query: TFDQuery; NomeColuna: string; AdicionarItemVazio: Boolean);
begin
  Combo.Items.BeginUpdate;
  try
    try
      Combo.Clear;

      // Verifica se a coluna existe na query
      if Query.FindField(NomeColuna) = nil then
        raise Exception.Create('Coluna "' + NomeColuna + '" não existe na query!');

      // Adiciona item vazio
      if AdicionarItemVazio then
        Combo.Items.Add('');

      // Executa query se necessário
      if not Query.Active then
        Query.Open;

      // Carrega dados
      Query.First;
      while not Query.EOF do
      begin
        Combo.Items.Add(Query.FieldByName(NomeColuna).AsString);
        Query.Next;
      end;

      // Configura seleção padrão
      Combo.ItemIndex := IfThen(AdicionarItemVazio, 0, -1);

    except
      on E: Exception do
        ShowMessage('Erro ao carregar combobox: ' + E.Message);
    end;
  finally
    Combo.Items.EndUpdate;
    Query.Close; // Ajuste conforme sua necessidade
  end;
end;

procedure TFrmRelatorios_Financeiros.ExportarParaCSV(const FileName: string);
var
  F: TextFile;
  i: Integer;
begin
  AssignFile(F, FileName);
  Rewrite(F);

  // Escrever cabeçalhos
  for i := 0 to dm.query_agendamentodiario.FieldCount - 1 do
  begin
    Write(F, dm.query_agendamentodiario.Fields[i].FieldName);
    if i < dm.query_agendamentodiario.FieldCount - 1 then
      Write(F, ';');
  end;
  Writeln(F);

  // Escrever dados
  dm.query_agendamentodiario.First;
  while not dm.query_agendamentodiario.Eof do
  begin
    for i := 0 to dm.query_agendamentodiario.FieldCount - 1 do
    begin
      Write(F, dm.query_agendamentodiario.Fields[i].AsString);
      if i < dm.query_agendamentodiario.FieldCount - 1 then
        Write(F, ';');
    end;
    Writeln(F);
    dm.query_agendamentodiario.Next;
  end;

  CloseFile(F);
  ShowMessage('Exportado com sucesso!');
end;

end.
